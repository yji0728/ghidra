/* ###
 * IP: GHIDRA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ghidra.features.headlessweb;

import io.javalin.Javalin;
import io.javalin.http.Context;
import io.javalin.http.staticfiles.Location;

import java.io.File;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import ghidra.features.headlessweb.api.AnalysisController;
import ghidra.features.headlessweb.api.WorkflowController;
import ghidra.features.headlessweb.api.BatchController;
import ghidra.features.headlessweb.service.MalwareAnalysisService;
import ghidra.features.headlessweb.service.WorkflowService;

/**
 * Main web application class for Ghidra Headless Malware Analysis
 * 
 * Provides REST API endpoints for:
 * 1. Example workflow execution
 * 2. User-defined headless command execution  
 * 3. IOC, function calls, and interesting strings extraction
 * 4. Batch/mass analysis processing
 * 5. Malware categorization and storage
 * 6. ML/Deep Learning integration for code pattern analysis
 */
public class MalwareAnalysisWebApp {
    
    private static final int DEFAULT_PORT = 8080;
    private final ExecutorService executorService;
    private final MalwareAnalysisService analysisService;
    private final WorkflowService workflowService;
    
    public MalwareAnalysisWebApp() {
        this.executorService = Executors.newCachedThreadPool();
        this.analysisService = new MalwareAnalysisService();
        this.workflowService = new WorkflowService();
    }
    
    public static void main(String[] args) {
        int port = args.length > 0 ? Integer.parseInt(args[0]) : DEFAULT_PORT;
        new MalwareAnalysisWebApp().start(port);
    }
    
    public void start(int port) {
        Javalin app = Javalin.create(config -> {
            // Static files configuration for web UI
            config.staticFiles.add("/web", Location.CLASSPATH);
            
            // CORS configuration for API access
            config.bundledPlugins.enableCors(cors -> {
                cors.addRule(it -> {
                    it.anyHost();
                    it.allowCredentials = false;
                });
            });
        });
        
        // Initialize API controllers
        AnalysisController analysisController = new AnalysisController(analysisService, executorService);
        WorkflowController workflowController = new WorkflowController(workflowService);
        BatchController batchController = new BatchController(analysisService, executorService);
        
        // Root endpoint
        app.get("/", this::serveIndex);
        
        // API Routes
        setupApiRoutes(app, analysisController, workflowController, batchController);
        
        app.start(port);
        System.out.println("Ghidra Headless Web Analyzer started on port " + port);
        System.out.println("Access the web interface at: http://localhost:" + port);
    }
    
    private void setupApiRoutes(Javalin app, AnalysisController analysisController, 
                               WorkflowController workflowController, BatchController batchController) {
        
        // Analysis endpoints
        app.post("/api/analyze/file", analysisController::analyzeFile);
        app.post("/api/analyze/custom", analysisController::executeCustomCommand);
        app.get("/api/analyze/status/{id}", analysisController::getAnalysisStatus);
        app.get("/api/analyze/result/{id}", analysisController::getAnalysisResult);
        app.get("/api/analyze/results", analysisController::getAllResults);
        
        // Workflow endpoints
        app.get("/api/workflows", workflowController::getExampleWorkflows);
        app.post("/api/workflows/execute", workflowController::executeWorkflow);
        app.get("/api/workflows/{id}/status", workflowController::getWorkflowStatus);
        
        // Batch processing endpoints
        app.post("/api/batch/analyze", batchController::submitBatchAnalysis);
        app.get("/api/batch/status/{id}", batchController::getBatchStatus);
        app.get("/api/batch/results/{id}", batchController::getBatchResults);
        
        // IOC and extraction endpoints
        app.get("/api/extract/iocs/{analysisId}", analysisController::extractIOCs);
        app.get("/api/extract/functions/{analysisId}", analysisController::extractFunctions);
        app.get("/api/extract/strings/{analysisId}", analysisController::extractStrings);
        
        // Malware categorization endpoints
        app.get("/api/malware/categories", analysisController::getMalwareCategories);
        app.post("/api/malware/categorize/{analysisId}", analysisController::categorizeMalware);
        app.get("/api/malware/category/{category}", analysisController::getMalwareByCategory);
        
        // ML/AI endpoints
        app.post("/api/ml/analyze-patterns/{analysisId}", analysisController::analyzeCodePatterns);
        app.post("/api/ml/deobfuscate/{analysisId}", analysisController::deobfuscateCode);
    }
    
    private void serveIndex(Context ctx) {
        ctx.html("""
            <!DOCTYPE html>
            <html>
            <head>
                <title>Ghidra Headless Malware Analysis</title>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <style>
                    body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                    .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                    h1 { color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }
                    h2 { color: #34495e; margin-top: 30px; }
                    .feature-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
                    .feature-card { background: #ecf0f1; padding: 20px; border-radius: 5px; border-left: 4px solid #3498db; }
                    .api-endpoint { background: #f8f9fa; padding: 10px; margin: 5px 0; border-radius: 3px; font-family: monospace; }
                    .method-get { border-left: 4px solid #28a745; }
                    .method-post { border-left: 4px solid #007bff; }
                    pre { background: #2c3e50; color: #ecf0f1; padding: 15px; border-radius: 5px; overflow-x: auto; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>üîç Ghidra Headless Malware Analysis Web Interface</h1>
                    
                    <p>Welcome to the Ghidra Headless Web Analyzer - an automated malware analysis platform that provides deep, detailed analysis with visualization and ML-powered insights.</p>
                    
                    <div class="feature-grid">
                        <div class="feature-card">
                            <h3>üìã Example Workflows</h3>
                            <p>Pre-configured analysis workflows for common malware analysis scenarios</p>
                        </div>
                        <div class="feature-card">
                            <h3>‚öôÔ∏è Custom Commands</h3>
                            <p>Execute user-defined headless Ghidra commands with full parameter control</p>
                        </div>
                        <div class="feature-card">
                            <h3>üîç IOC Extraction</h3>
                            <p>Automated extraction of Indicators of Compromise, function calls, and interesting strings</p>
                        </div>
                        <div class="feature-card">
                            <h3>üîÑ Batch Processing</h3>
                            <p>Large-scale analysis processing for multiple files and directories</p>
                        </div>
                        <div class="feature-card">
                            <h3>üìä Categorization</h3>
                            <p>Automatic malware type classification and organized storage</p>
                        </div>
                        <div class="feature-card">
                            <h3>ü§ñ ML Integration</h3>
                            <p>Machine Learning powered code pattern analysis and deobfuscation</p>
                        </div>
                    </div>
                    
                    <h2>API Endpoints</h2>
                    
                    <h3>Analysis</h3>
                    <div class="api-endpoint method-post">POST /api/analyze/file - Upload and analyze a file</div>
                    <div class="api-endpoint method-post">POST /api/analyze/custom - Execute custom headless command</div>
                    <div class="api-endpoint method-get">GET /api/analyze/status/{id} - Get analysis status</div>
                    <div class="api-endpoint method-get">GET /api/analyze/result/{id} - Get analysis results</div>
                    
                    <h3>Workflows</h3>
                    <div class="api-endpoint method-get">GET /api/workflows - Get example workflows</div>
                    <div class="api-endpoint method-post">POST /api/workflows/execute - Execute workflow</div>
                    
                    <h3>Extraction</h3>
                    <div class="api-endpoint method-get">GET /api/extract/iocs/{analysisId} - Extract IOCs</div>
                    <div class="api-endpoint method-get">GET /api/extract/functions/{analysisId} - Extract function calls</div>
                    <div class="api-endpoint method-get">GET /api/extract/strings/{analysisId} - Extract interesting strings</div>
                    
                    <h3>Example Usage</h3>
                    <pre>
# Upload file for analysis
curl -X POST -F "file=@malware.exe" http://localhost:8080/api/analyze/file

# Execute custom headless command
curl -X POST -H "Content-Type: application/json" \\
  -d '{"command":"analyzeHeadless /tmp/project TestProject -import malware.exe -postScript ExtractStrings.java"}' \\
  http://localhost:8080/api/analyze/custom

# Get analysis results
curl http://localhost:8080/api/analyze/result/{analysis-id}
                    </pre>
                    
                    <p><strong>Status:</strong> ‚úÖ Web server running and ready for analysis requests</p>
                </div>
            </body>
            </html>
        """);
    }
    
    public void stop() {
        executorService.shutdown();
    }
}